using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace ptr727.LanguageTags;

public partial class Iso6392
{
    public const string DataUri = @"https://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt";
    public const string DataFileName = "iso6392";

    public static Iso6392 LoadData(string fileName)
    {
        // https://www.loc.gov/standards/iso639-2/ascii_8bits.html
        // Alpha-3 (bibliographic) code
        // Alpha-3 (terminologic) code (when given)
        // Alpha-2 code (when given)
        // English name
        // French name (when given)
        // | deliminator
        // LF line terminator

        // Read line by line
        Iso6392 iso6392 = new();
        using StreamReader lineReader = new(File.OpenRead(fileName));
        string line;
        while ((line = lineReader.ReadLine()) is not null)
        {
            // Parse using pipe character
            string[] records = line.Split('|');
            Debug.Assert(records.Length == 5);

            // Populate record
            Record record = new()
            {
                Part2B = records[0].Trim(),
                Part2T = records[1].Trim(),
                Part1 = records[2].Trim(),
                RefName = records[3].Trim(),
            };
            Debug.Assert(!string.IsNullOrEmpty(record.Part2B));
            Debug.Assert(!string.IsNullOrEmpty(record.RefName));
            iso6392.RecordList.Add(record);
        }

        return iso6392;
    }

    public static Iso6392 LoadJson(string fileName) =>
        JsonSerializer.Deserialize<Iso6392>(
            File.ReadAllText(fileName),
            JsonOptions.JsonReadOptions
        );

    public static void SaveJson(string fileName, Iso6392 iso6392) =>
        File.WriteAllText(
            fileName,
            JsonSerializer.Serialize(iso6392, JsonOptions.JsonWriteOptions)
        );

    public static void GenCode(string fileName, Iso6392 iso6392)
    {
        StringBuilder stringBuilder = new();
        _ = stringBuilder.AppendLine(
            """
            // This file is generated by LanguageTags.Iso6392.GenCode

            namespace ptr727.LanguageTags;

            public partial class Iso6392
            {
                public static Iso6392 Create()
                {
                    Iso6392 iso6392 = new();
            """
        );

        iso6392.RecordList.ForEach(record =>
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""

                        iso6392.RecordList.Add(
                            new()
                            {
                                Part2B = "{{record.Part2B}}",
                                Part2T = "{{record.Part2T}}",
                                Part1 = "{{record.Part1}}",
                                RefName = "{{record.RefName}}",
                            }
                        );
                """
            )
        );

        _ = stringBuilder.AppendLine(
            """

                    return iso6392;
                }
            }
            """
        );

        // Write to file
        File.WriteAllText(fileName, stringBuilder.ToString());
    }

    public class Record
    {
        // Default to use 2B
        public string Id => Part2B;

        // 639-2 Bibliographic
        public string Part2B { get; set; } = "";

        // 639-2 Terminology
        public string Part2T { get; set; } = "";

        // 639-1
        public string Part1 { get; set; } = "";

        // English name
        public string RefName { get; set; } = "";
    }

    public List<Record> RecordList { get; private set; } = [];

    /// <summary>
    /// Finds a language record that matches the specified language tag.
    /// </summary>
    /// <param name="languageTag">
    /// The language tag to search for. This can be a 2-letter (ISO 639-1), 3-letter (ISO 639-2/B or ISO 639-2/T), or a language name.
    /// </param>
    /// <param name="includeDescription">
    /// If set to <c>true</c>, the method will also attempt to match the language tag against the language's reference name (RefName), including partial matches.
    /// </param>
    /// <returns>
    /// The <see cref="Record"/> that matches the specified language tag, or <c>null</c> if no match is found.
    /// </returns>
    public Record Find(string languageTag, bool includeDescription)
    {
        // Find the matching language entry
        Record record = null;

        // 693 3 letter form
        if (languageTag.Length == 3)
        {
            // Try the 639-2/B
            record = RecordList.FirstOrDefault(item =>
                item.Part2B.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/T
            record = RecordList.FirstOrDefault(item =>
                item.Part2T.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // 693 2 letter form
        if (languageTag.Length == 2)
        {
            // Try 639-1
            record = RecordList.FirstOrDefault(item =>
                item.Part1.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Long form
        if (includeDescription)
        {
            // Exact match
            record = RecordList.FirstOrDefault(item =>
                item.RefName.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Partial match
            record = RecordList.FirstOrDefault(item =>
                item.RefName.Contains(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Not found
        return null;
    }
}
