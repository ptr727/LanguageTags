using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace ptr727.LanguageTags;

public partial class Iso6392Data
{
    internal static void WriteFile(string fileName, string value)
    {
        // Always write as CRLF with newline at the end
        if (Environment.NewLine != "\r\n")
        {
            value = value.Replace("\n", "\r\n");
        }
        value = value.TrimEnd() + "\r\n";
        File.WriteAllText(fileName, value);
    }

    public const string DataUri = "https://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt";
    public const string DataFileName = "iso6392";

    public static Iso6392Data LoadData(string fileName)
    {
        // https://www.loc.gov/standards/iso639-2/ascii_8bits.html
        // Alpha-3 (bibliographic) code
        // Alpha-3 (terminologic) code (when given)
        // Alpha-2 code (when given)
        // English name
        // French name (when given)
        // | deliminator
        // LF line terminator

        // Read line by line
        List<Record> recordList = [];
        using StreamReader lineReader = new(File.OpenRead(fileName));
        while (lineReader.ReadLine() is { } line)
        {
            // Parse using pipe character
            List<string> records = [.. line.Split('|').Select(item => item.Trim())];
            Debug.Assert(records.Count == 5);

            // Populate record
            Record record = new()
            {
                Part2B = string.IsNullOrEmpty(records[0]) ? null : records[0],
                Part2T = string.IsNullOrEmpty(records[1]) ? null : records[1],
                Part1 = string.IsNullOrEmpty(records[2]) ? null : records[2],
                RefName = string.IsNullOrEmpty(records[3]) ? null : records[3],
            };
            Debug.Assert(!string.IsNullOrEmpty(record.Part2B));
            Debug.Assert(!string.IsNullOrEmpty(record.RefName));
            recordList.Add(record);
        }

        return new Iso6392Data { RecordList = [.. recordList] };
    }

    public static Iso6392Data LoadJson(string fileName) =>
        JsonSerializer.Deserialize<Iso6392Data>(
            File.ReadAllText(fileName),
            JsonOptions.JsonReadOptions
        );

    public static void SaveJson(string fileName, Iso6392Data iso6392) =>
        File.WriteAllText(
            fileName,
            JsonSerializer.Serialize(iso6392, JsonOptions.JsonWriteOptions)
        );

    public static void GenCode(string fileName, Iso6392Data iso6392)
    {
        StringBuilder stringBuilder = new();
        _ = stringBuilder.AppendLine(
            """
            // This file is generated by LanguageTagsCreate

            namespace ptr727.LanguageTags;

            public partial class Iso6392Data
            {
                public static Iso6392Data Create() =>
                    new()
                    {
                        RecordList =
                        [
            """
        );

        foreach (Record record in iso6392.RecordList)
        {
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""
                                new()
                                {
                """
            );
            if (!string.IsNullOrEmpty(record.Part2B))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part2B = \"{record.Part2B}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Part2T))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part2T = \"{record.Part2T}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Part1))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part1 = \"{record.Part1}\","
                );
            }
            if (!string.IsNullOrEmpty(record.RefName))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    RefName = \"{record.RefName}\","
                );
            }
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""
                                },
                """
            );
        }
        _ = stringBuilder.AppendLine(
            """
                        ],
                    };
            }
            """
        );

        WriteFile(fileName, stringBuilder.ToString());
    }

    public record Record
    {
        // 639-2 Bibliographic
        public string Part2B { get; init; }

        // 639-2 Terminology
        public string Part2T { get; init; }

        // 639-1
        public string Part1 { get; init; }

        // English name
        public string RefName { get; init; }
    }

    public ImmutableArray<Record> RecordList { get; init; }

    public Record Find(string languageTag, bool includeDescription)
    {
        // Find the matching language entry
        Record record = null;

        // 693 3 letter form
        if (languageTag.Length == 3)
        {
            // Try the 639-2/B
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part2B)
                && item.Part2B.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/T
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part2T)
                && item.Part2T.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // 693 2 letter form
        if (languageTag.Length == 2)
        {
            // Try 639-1
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part1)
                && item.Part1.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Long form
        if (includeDescription)
        {
            // Exact match
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.RefName)
                && item.RefName.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Partial match
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.RefName)
                && item.RefName.Contains(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Not found
        return null;
    }
}
