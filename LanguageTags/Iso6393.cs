using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace ptr727.LanguageTags;

public partial class Iso6393
{
    public const string DataUri =
        @"https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab";
    public const string DataFileName = "iso6393";

    public static Iso6393 LoadData(string fileName)
    {
        // https://iso639-3.sil.org/code_tables/download_tables
        // Id char(3) NOT NULL, The three-letter 639-3 identifier
        // Part2B char(3) NULL, Equivalent 639-2 identifier of the bibliographic applications code set, if there is one
        // Part2T char(3) NULL, Equivalent 639-2 identifier of the terminology applications code set, if there is one
        // Part1 char(2) NULL, Equivalent 639-1 identifier, if there is one
        // Scope char(1) NOT NULL, I(ndividual), M(acrolanguage), S(pecial)
        // Type char(1) NOT NULL, A(ncient), C(onstructed), E(xtinct), H(istorical), L(iving), S(pecial)
        // Ref_Name varchar(150) NOT NULL, Reference language name
        // Comment varchar(150) NULL) Comment relating to one or more of the columns

        // Read header
        // Id	Part2b	Part2t	Part1	Scope	Language_Type	Ref_Name	Comment
        Iso6393 iso6393 = new();
        using StreamReader lineReader = new(File.OpenRead(fileName));
        string line = lineReader.ReadLine();
        Debug.Assert(!string.IsNullOrEmpty(line));
        Debug.Assert(line.Split('\t').Length == 8);

        // Read line by line
        while ((line = lineReader.ReadLine()) is not null)
        {
            // Parse using tab character
            string[] records = line.Split('\t');
            Debug.Assert(records.Length == 8);

            // Populate record
            Record record = new()
            {
                Id = records[0].Trim(),
                Part2B = records[1].Trim(),
                Part2T = records[2].Trim(),
                Part1 = records[3].Trim(),
                Scope = records[4].Trim(),
                LanguageType = records[5].Trim(),
                RefName = records[6].Trim(),
                Comment = records[7].Trim(),
            };
            Debug.Assert(!string.IsNullOrEmpty(record.Id));
            Debug.Assert(!string.IsNullOrEmpty(record.Scope));
            Debug.Assert(!string.IsNullOrEmpty(record.LanguageType));
            Debug.Assert(!string.IsNullOrEmpty(record.RefName));
            iso6393.RecordList.Add(record);
        }

        return iso6393;
    }

    public static Iso6393 LoadJson(string fileName) =>
        JsonSerializer.Deserialize<Iso6393>(
            File.ReadAllText(fileName),
            JsonOptions.JsonReadOptions
        );

    public static void SaveJson(string fileName, Iso6393 iso6393) =>
        File.WriteAllText(
            fileName,
            JsonSerializer.Serialize(iso6393, JsonOptions.JsonWriteOptions)
        );

    public static void GenCode(string fileName, Iso6393 iso6393)
    {
        StringBuilder stringBuilder = new();
        _ = stringBuilder.AppendLine(
            """
            // This file is generated by LanguageTags.Iso6393.GenCode

            namespace ptr727.LanguageTags;

            public partial class Iso6393
            {
                public static Iso6393 Create()
                {
                    Iso6393 iso6393 = new();
            """
        );

        iso6393.RecordList.ForEach(record =>
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""

                        iso6393.RecordList.Add(
                            new()
                            {
                                Id = "{{record.Id}}",
                                Part2B = "{{record.Part2B}}",
                                Part2T = "{{record.Part2T}}",
                                Part1 = "{{record.Part1}}",
                                Scope = "{{record.Scope}}",
                                LanguageType = "{{record.LanguageType}}",
                                RefName = "{{record.RefName}}",
                                Comment = "{{record.Comment}}",
                            }
                        );
                """
            )
        );

        _ = stringBuilder.AppendLine(
            $$"""

                    return iso6393;
                }
            }
            """
        );

        // Write to file
        File.WriteAllText(fileName, stringBuilder.ToString());
    }

    public class Record
    {
        // The three-letter 639-3 identifier
        public string Id { get; set; } = "";

        // Equivalent 639-2 identifier of the bibliographic applications code set, if there is one
        public string Part2B { get; set; } = "";

        // Equivalent 639-2 identifier of the terminology applications code set, if there is one
        public string Part2T { get; set; } = "";

        // Equivalent 639-1 identifier, if there is one
        public string Part1 { get; set; } = "";

        // I(ndividual), M(acrolanguage), S(pecial)
        public string Scope { get; set; } = "";

        // A(ncient), C(onstructed), E(xtinct), H(istorical), L(iving), S(pecial)
        public string LanguageType { get; set; } = "";

        // Reference language name
        public string RefName { get; set; } = "";

        // Comment relating to one or more of the columns
        public string Comment { get; set; } = "";
    }

    public List<Record> RecordList { get; private set; } = [];

    /// <summary>
    /// Finds a language record that matches the specified language tag.
    /// </summary>
    /// <param name="languageTag">
    /// The language tag to search for. This can be a 2-letter (ISO 639-1), 3-letter (ISO 639-2/B, ISO 639-2/T, or ISO 639-3), or a language name.
    /// </param>
    /// <param name="includeDescription">
    /// If set to <c>true</c>, the method will also attempt to match the language tag against the language's reference name (RefName), including partial matches.
    /// </param>
    /// <returns>
    /// The <see cref="Record"/> that matches the specified language tag, or <c>null</c> if no match is found.
    /// </returns>
    public Record Find(string languageTag, bool includeDescription)
    {
        // Find the matching language entry
        Record record = null;

        // 693 3 letter form
        if (languageTag.Length == 3)
        {
            // Try 639-3
            record = RecordList.FirstOrDefault(item =>
                item.Id.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/B
            record = RecordList.FirstOrDefault(item =>
                item.Part2B.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/T
            record = RecordList.FirstOrDefault(item =>
                item.Part2T.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // 693 2 letter form
        if (languageTag.Length == 2)
        {
            // Try 639-1
            record = RecordList.FirstOrDefault(item =>
                item.Part1.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Long form
        if (includeDescription)
        {
            // Exact match
            record = RecordList.FirstOrDefault(item =>
                item.RefName.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Partial match
            record = RecordList.FirstOrDefault(item =>
                item.RefName.Contains(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Not found
        return null;
    }
}
