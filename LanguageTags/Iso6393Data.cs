using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace ptr727.LanguageTags;

public partial class Iso6393Data
{
    public const string DataUri =
        "https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab";
    public const string DataFileName = "iso6393";

    public static Iso6393Data LoadData(string fileName)
    {
        // https://iso639-3.sil.org/code_tables/download_tables
        // Id char(3) NOT NULL, The three-letter 639-3 identifier
        // Part2B char(3) NULL, Equivalent 639-2 identifier of the bibliographic applications code set, if there is one
        // Part2T char(3) NULL, Equivalent 639-2 identifier of the terminology applications code set, if there is one
        // Part1 char(2) NULL, Equivalent 639-1 identifier, if there is one
        // Scope char(1) NOT NULL, I(ndividual), M(acrolanguage), S(pecial)
        // Type char(1) NOT NULL, A(ncient), C(onstructed), E(xtinct), H(istorical), L(iving), S(pecial)
        // Ref_Name varchar(150) NOT NULL, Reference language name
        // Comment varchar(150) NULL) Comment relating to one or more of the columns

        // Read header
        // Id	Part2b	Part2t	Part1	Scope	Language_Type	Ref_Name	Comment
        List<Record> recordList = [];
        using StreamReader lineReader = new(File.OpenRead(fileName));
        string line = lineReader.ReadLine();
        Debug.Assert(!string.IsNullOrEmpty(line));
        Debug.Assert(line.Split('\t').Length == 8);

        // Read line by line
        while ((line = lineReader.ReadLine()) is not null)
        {
            // Parse using tab character
            List<string> records = [.. line.Split('\t').Select(item => item.Trim())];
            Debug.Assert(records.Count == 8);

            // Populate record
            Record record = new()
            {
                Id = string.IsNullOrEmpty(records[0]) ? null : records[0],
                Part2B = string.IsNullOrEmpty(records[1]) ? null : records[1],
                Part2T = string.IsNullOrEmpty(records[2]) ? null : records[2],
                Part1 = string.IsNullOrEmpty(records[3]) ? null : records[3],
                Scope = string.IsNullOrEmpty(records[4]) ? null : records[4],
                LanguageType = string.IsNullOrEmpty(records[5]) ? null : records[5],
                RefName = string.IsNullOrEmpty(records[6]) ? null : records[6],
                Comment = string.IsNullOrEmpty(records[7]) ? null : records[7],
            };
            Debug.Assert(!string.IsNullOrEmpty(record.Id));
            Debug.Assert(!string.IsNullOrEmpty(record.Scope));
            Debug.Assert(!string.IsNullOrEmpty(record.LanguageType));
            Debug.Assert(!string.IsNullOrEmpty(record.RefName));
            recordList.Add(record);
        }

        return new Iso6393Data { RecordList = [.. recordList] };
    }

    public static Iso6393Data LoadJson(string fileName) =>
        JsonSerializer.Deserialize<Iso6393Data>(
            File.ReadAllText(fileName),
            JsonOptions.JsonReadOptions
        );

    public static void SaveJson(string fileName, Iso6393Data iso6393) =>
        File.WriteAllText(
            fileName,
            JsonSerializer.Serialize(iso6393, JsonOptions.JsonWriteOptions)
        );

    public static void GenCode(string fileName, Iso6393Data iso6393)
    {
        StringBuilder stringBuilder = new();
        _ = stringBuilder.AppendLine(
            """
            // This file is generated by LanguageTagsCreate

            namespace ptr727.LanguageTags;

            public partial class Iso6393Data
            {
                public static Iso6393Data Create() =>
                    new()
                    {
                        RecordList =
                        [
            """
        );

        foreach (Record record in iso6393.RecordList)
        {
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""
                                new()
                                {
                """
            );
            if (!string.IsNullOrEmpty(record.Id))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Id = \"{record.Id}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Part2B))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part2B = \"{record.Part2B}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Part2T))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part2T = \"{record.Part2T}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Part1))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Part1 = \"{record.Part1}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Scope))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Scope = \"{record.Scope}\","
                );
            }
            if (!string.IsNullOrEmpty(record.LanguageType))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    LanguageType = \"{record.LanguageType}\","
                );
            }
            if (!string.IsNullOrEmpty(record.RefName))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    RefName = \"{record.RefName}\","
                );
            }
            if (!string.IsNullOrEmpty(record.Comment))
            {
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $"                    Comment = \"{record.Comment}\","
                );
            }
            _ = stringBuilder.AppendLine(
                """
                                },
                """
            );
        }
        _ = stringBuilder.AppendLine(
            """
                        ],
                    };
            }
            """
        );

        Iso6392Data.WriteFile(fileName, stringBuilder.ToString());
    }

    public record Record
    {
        // The three-letter 639-3 identifier
        public string Id { get; init; }

        // Equivalent 639-2 identifier of the bibliographic applications code set, if there is one
        public string Part2B { get; init; }

        // Equivalent 639-2 identifier of the terminology applications code set, if there is one
        public string Part2T { get; init; }

        // Equivalent 639-1 identifier, if there is one
        public string Part1 { get; init; }

        // I(ndividual), M(acrolanguage), S(pecial)
        public string Scope { get; init; }

        // A(ncient), C(onstructed), E(xtinct), H(istorical), L(iving), S(pecial)
        public string LanguageType { get; init; }

        // Reference language name
        public string RefName { get; init; }

        // Comment relating to one or more of the columns
        public string Comment { get; init; }
    }

    public ImmutableArray<Record> RecordList { get; init; }

    public Record Find(string languageTag, bool includeDescription)
    {
        // Find the matching language entry
        Record record = null;

        // 693 3 letter form
        if (languageTag.Length == 3)
        {
            // Try 639-3
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Id)
                && item.Id.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/B
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part2B)
                && item.Part2B.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Try the 639-2/T
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part2T)
                && item.Part2T.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // 693 2 letter form
        if (languageTag.Length == 2)
        {
            // Try 639-1
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.Part1)
                && item.Part1.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Long form
        if (includeDescription)
        {
            // Exact match
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.RefName)
                && item.RefName.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }

            // Partial match
            record = RecordList.FirstOrDefault(item =>
                !string.IsNullOrEmpty(item.RefName)
                && item.RefName.Contains(languageTag, StringComparison.OrdinalIgnoreCase)
            );
            if (record != null)
            {
                return record;
            }
        }

        // Not found
        return null;
    }
}
