using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace ptr727.LanguageTags;

public partial class Rfc5646
{
    public const string DataUri =
        @"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry";
    public const string DataFileName = "rfc5646";

    public static Rfc5646 LoadData(string fileName)
    {
        // https://www.rfc-editor.org/rfc/rfc5646.html#section-3.1.1
        // record-jar format: https://datatracker.ietf.org/doc/html/draft-phillips-record-jar-02
        Rfc5646 rfc5646 = new();
        Parser parser = new();
        using StreamReader lineReader = new(File.OpenRead(fileName));

        // First record is file date
        _ = parser.ReadAttributes(lineReader);
        rfc5646.FileDate = parser.GetFileDate();

        // Read all record attributes separated by %% until EOF
        while (parser.ReadAttributes(lineReader))
        {
            rfc5646.RecordList.Add(parser.GetRecord());
        }
        rfc5646.RecordList.Add(parser.GetRecord());

        return rfc5646;
    }

    public static Rfc5646 LoadJson(string fileName) =>
        JsonSerializer.Deserialize<Rfc5646>(
            File.ReadAllText(fileName),
            JsonOptions.JsonReadOptions
        );

    public static void SaveJson(string fileName, Rfc5646 rfc5646) =>
        File.WriteAllText(
            fileName,
            JsonSerializer.Serialize(rfc5646, JsonOptions.JsonWriteOptions)
        );

    public static void GenCode(string fileName, Rfc5646 rfc5646)
    {
        StringBuilder stringBuilder = new();
        _ = stringBuilder.AppendLine(
            CultureInfo.InvariantCulture,
            $$"""
            // This file is generated by LanguageTags.Rfc5646.GenCode

            using System;

            namespace ptr727.LanguageTags;

            public partial class Rfc5646
            {
                public static Rfc5646 Create()
                {
                    Rfc5646 rfc5646 = new() { FileDate = new DateOnly({{rfc5646.FileDate.Year}}, {{rfc5646.FileDate.Month}}, {{rfc5646.FileDate.Day}}) };
                    Record record;
            """
        );

        rfc5646.RecordList.ForEach(record =>
        {
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""

                        record = new()
                        {
                            Type = RecordType.{{record.Type.ToString()}},
                            SubTag = "{{record.SubTag}}",
                            Added = new DateOnly({{record.Added.Year}}, {{record.Added.Month}}, {{record.Added.Day}}),
                            SuppressScript = "{{record.SuppressScript}}",
                            Scope = "{{record.Scope}}",
                            MacroLanguage = "{{record.MacroLanguage}}",
                            Deprecated = new DateOnly({{record.Deprecated.Year}}, {{record.Deprecated.Month}}, {{record.Deprecated.Day}}),
                            PreferredValue = "{{record.PreferredValue}}",
                            Tag = "{{record.Tag}}",
                        };
                """
            );
            record.Description.ForEach(description =>
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $$"""
                            record.Description.Add(@"{{description.Replace("\"", "\"\"")}}");
                    """
                )
            );
            record.Comments.ForEach(comments =>
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $$"""
                            record.Comments.Add(@"{{comments.Replace("\"", "\"\"")}}");
                    """
                )
            );
            record.Prefix.ForEach(prefix =>
                _ = stringBuilder.AppendLine(
                    CultureInfo.InvariantCulture,
                    $$"""
                            record.Prefix.Add("{{prefix}}");
                    """
                )
            );
            _ = stringBuilder.AppendLine(
                CultureInfo.InvariantCulture,
                $$"""
                        rfc5646.RecordList.Add(record);
                """
            );
        });
        _ = stringBuilder.AppendLine(
            """

                    return rfc5646;
                }
            }
            """
        );

        Iso6392.WriteFile(fileName, stringBuilder.ToString());
    }

    private sealed class Parser
    {
        private readonly List<KeyValuePair<string, string>> _attributeList = [];

        public bool ReadAttributes(StreamReader lineReader)
        {
            // Read until %% or EOF
            _attributeList.Clear();
            bool eof = false;
            while (true)
            {
                // Read next line
                string line = lineReader.ReadLine();
                if (string.IsNullOrEmpty(line))
                {
                    // End of file
                    eof = true;
                    break;
                }
                if (line.Equals("%%", StringComparison.Ordinal))
                {
                    // End of record
                    break;
                }

                // First line should not be multiline
                Debug.Assert(!line.StartsWith("  ", StringComparison.Ordinal));

                // Multiline record starts with two spaces
                // Peek at the next line an look for a space
                while (true)
                {
                    // There is no PeekLine(), so we only get 1 char look ahead
                    // -1 is EOF or error, else cast to Char
                    int peek = lineReader.Peek();
                    if (peek == -1 || (char)peek != ' ')
                    {
                        // Done
                        break;
                    }

                    // Append the next line to the current line
                    string multiLine = lineReader.ReadLine();
                    Debug.Assert(multiLine.StartsWith("  ", StringComparison.Ordinal));
                    line = $"{line.Trim()} {multiLine.Trim()}";
                }

                // Create attribute pair
                int divider = line.IndexOf(':');
                string key = line[..divider];
                string value = line[(divider + 1)..].Trim();

                // Add to attribute list
                _attributeList.Add(new KeyValuePair<string, string>(key, value));
            }

            return !eof;
        }

        public Record GetRecord()
        {
            Debug.Assert(_attributeList.Count > 0);
            Record record = new();
            foreach (KeyValuePair<string, string> pair in _attributeList)
            {
                switch (pair.Key.ToLowerInvariant())
                {
                    case "type":
                        record.Type = TypeFromString(pair.Value);
                        break;
                    case "subtag":
                        record.SubTag = pair.Value;
                        break;
                    case "description":
                        record.Description.Add(pair.Value);
                        break;
                    case "added":
                        record.Added = DateFromString(pair.Value);
                        break;
                    case "suppress-script":
                        record.SuppressScript = pair.Value;
                        break;
                    case "scope":
                        record.Scope = pair.Value;
                        break;
                    case "macrolanguage":
                        record.MacroLanguage = pair.Value;
                        break;
                    case "deprecated":
                        record.Deprecated = DateFromString(pair.Value);
                        break;
                    case "comments":
                        record.Comments.Add(pair.Value);
                        break;
                    case "prefix":
                        record.Prefix.Add(pair.Value);
                        break;
                    case "preferred-value":
                        record.PreferredValue = pair.Value;
                        break;
                    case "tag":
                        record.Tag = pair.Value;
                        break;
                    default:
                        throw new NotImplementedException();
                }
            }
            Debug.Assert(record.Type != RecordType.None);
            Debug.Assert(!string.IsNullOrEmpty(record.Tag) || !string.IsNullOrEmpty(record.SubTag));
            return record;
        }

        public DateOnly GetFileDate()
        {
            KeyValuePair<string, string> pair = _attributeList.First();
            Debug.Assert(pair.Key.Equals("File-Date", StringComparison.Ordinal));
            return DateFromString(pair.Value);
        }

        public static DateOnly DateFromString(string value) =>
            DateOnly.ParseExact(value, "yyyy-MM-dd", CultureInfo.InvariantCulture);
    }

    public enum RecordType
    {
        None,
        Language,
        ExtLanguage,
        Script,
        Variant,
        Grandfathered,
        Region,
        Redundant,
    }

    public class Record
    {
        public RecordType Type { get; set; } = RecordType.None;
        public string SubTag { get; set; } = "";
        public List<string> Description { get; set; } = [];
        public DateOnly Added { get; set; } = DateOnly.MinValue;
        public string SuppressScript { get; set; } = "";
        public string Scope { get; set; } = "";
        public string MacroLanguage { get; set; } = "";
        public DateOnly Deprecated { get; set; } = DateOnly.MinValue;
        public List<string> Comments { get; set; } = [];
        public List<string> Prefix { get; set; } = [];
        public string PreferredValue { get; set; } = "";
        public string Tag { get; set; } = "";

        public string TagAny => string.IsNullOrEmpty(SubTag) ? Tag : SubTag;
    }

    public DateOnly FileDate { get; private set; } = DateOnly.MinValue;
    public List<Record> RecordList { get; private set; } = [];

    private static RecordType TypeFromString(string value) =>
        value.ToLower(CultureInfo.InvariantCulture) switch
        {
            "language" => RecordType.Language,
            "extlang" => RecordType.ExtLanguage,
            "script" => RecordType.Script,
            "variant" => RecordType.Variant,
            "grandfathered" => RecordType.Grandfathered,
            "region" => RecordType.Region,
            "redundant" => RecordType.Redundant,
            _ => throw new NotImplementedException(),
        };

    /// <summary>
    /// Finds a <see cref="Record"/> in the <c>RecordList</c> that matches the specified language tag or description.
    /// The search is performed in the following order: Tag, SubTag, PreferredValue, and optionally Description (exact and partial match).
    /// </summary>
    /// <param name="languageTag">
    /// The language tag or description to search for. The search is case-insensitive and will match against the Tag, SubTag, PreferredValue, and optionally Description fields.
    /// </param>
    /// <param name="includeDescription">
    /// If set to <c>true</c>, the method will also search for matches in the Description field (both exact and partial matches).
    /// </param>
    /// <returns>
    /// The first matching <see cref="Record"/> if found; otherwise, <c>null</c>.
    /// </returns>
    public Record Find(string languageTag, bool includeDescription)
    {
        // Find the matching language entry
        Record record = null;

        // Tag
        record = RecordList.FirstOrDefault(item =>
            item.Tag.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
        );
        if (record != null)
        {
            return record;
        }

        // SubTag
        record = RecordList.FirstOrDefault(item =>
            item.SubTag.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
        );
        if (record != null)
        {
            return record;
        }

        // PreferredValue
        record = RecordList.FirstOrDefault(item =>
            item.PreferredValue.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
        );
        if (record != null)
        {
            return record;
        }

        // Description
        if (includeDescription)
        {
            // Exact match
            record = RecordList.FirstOrDefault(item =>
                item.Description.Any(description =>
                    description.Equals(languageTag, StringComparison.OrdinalIgnoreCase)
                )
            );
            if (record != null)
            {
                return record;
            }

            // Partial match
            record = RecordList.FirstOrDefault(item =>
                item.Description.Any(description =>
                    description.Contains(languageTag, StringComparison.OrdinalIgnoreCase)
                )
            );
            if (record != null)
            {
                return record;
            }
        }

        // Not found
        return null;
    }
}
